#!/bin/bash

# =============================================
# Script de d√©marrage EPM Retail Platform
# =============================================

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logo
echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                   ‚ïë
‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó                   ‚ïë
‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë                   ‚ïë
‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë                   ‚ïë
‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë                   ‚ïë
‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë                   ‚ïë
‚ïë     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù                   ‚ïë
‚ïë                                                   ‚ïë
‚ïë          RETAIL PERFORMANCE PLATFORM              ‚ïë
‚ïë                                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Fonction pour afficher les messages
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier si Docker est install√©
check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        log_info "Installation: https://docs.docker.com/get-docker/"
        exit 1
    fi
    log_info "Docker d√©tect√©: $(docker --version)"
}

# V√©rifier si Docker Compose est install√©
check_docker_compose() {
    if ! command -v docker compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        log_info "Installation: https://docs.docker.com/compose/install/"
        exit 1
    fi
    log_info "Docker Compose d√©tect√©: $(docker compose --version)"
}

# Cr√©er les fichiers .env s'ils n'existent pas
create_env_files() {
    log_info "V√©rification des fichiers de configuration..."
    
    # .env API
    if [ ! -f "api/.env" ]; then
        log_warning "Cr√©ation de api/.env"
        cat > api/.env << EOL
DB_HOST=postgres
DB_PORT=5432
DB_NAME=epm_retail
DB_USER=postgres
DB_PASSWORD=admin
PORT=8008
SECRET_KEY=$(openssl rand -hex 32)
ALLOWED_ORIGINS=http://localhost:5173
LOG_LEVEL=INFO
EOL
    fi

    # .env Frontend
    if [ ! -f "frontend/.env" ]; then
        log_warning "Cr√©ation de frontend/.env"
        cat > frontend/.env << EOL
VITE_API_URL=http://localhost:8008
VITE_APP_NAME=EPM Retail Platform
EOL
    fi

    log_info "Fichiers de configuration OK"
}

# Nettoyer les anciens conteneurs
cleanup() {
    log_info "Nettoyage des anciens conteneurs..."
    docker compose down -v 2>/dev/null || true
}

# Construire les images
build_images() {
    log_info "Construction des images Docker..."
    docker compose build --no-cache
    log_info "Images construites avec succ√®s"
}

# D√©marrer les services
start_services() {
    log_info "D√©marrage des services..."
    docker compose up -d

    # Attendre que les services soient pr√™ts
    log_info "Attente du d√©marrage des services..."
    sleep 10

    # V√©rifier la sant√© des services
    log_info "V√©rification de la sant√© des services..."

    # PostgreSQL
    if docker compose exec -T postgres pg_isready -U postgres &> /dev/null; then
        log_info "‚úì PostgreSQL est pr√™t"
    else
        log_error "‚úó PostgreSQL n'est pas pr√™t"
    fi

    # API
    if curl -s http://localhost:8008/health &> /dev/null; then
        log_info "‚úì API FastAPI est pr√™te"
    else
        log_warning "‚úó API n'est pas encore pr√™te (d√©marrage en cours...)"
    fi
    
    # Frontend
    if curl -s http://localhost:5173 &> /dev/null; then
        log_info "‚úì Frontend est pr√™t"
    else
        log_warning "‚úó Frontend n'est pas encore pr√™t (d√©marrage en cours...)"
    fi
}

# Afficher les informations de connexion
show_info() {
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë          üéâ D√©marrage r√©ussi !                    ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${BLUE}üìä Application Web:${NC}        http://localhost:5173"
    echo -e "${BLUE}üîå API Documentation:${NC}     http://localhost:8000/docs"
    echo -e "${BLUE}üìà API Health:${NC}            http://localhost:8000/health"
    echo -e "${BLUE}üóÑÔ∏è  pgAdmin:${NC}               http://localhost:5050"
    echo -e "${BLUE}   ‚îî‚îÄ Email:${NC}              admin@epmretail.com"
    echo -e "${BLUE}   ‚îî‚îÄ Password:${NC}           admin"
    echo ""
    echo -e "${YELLOW}üìù Commandes utiles:${NC}"
    echo -e "   ${GREEN}docker compose logs -f${NC}          Voir les logs"
    echo -e "   ${GREEN}docker compose ps${NC}               √âtat des services"
    echo -e "   ${GREEN}docker compose down${NC}             Arr√™ter les services"
    echo -e "   ${GREEN}docker compose restart api${NC}      Red√©marrer l'API"
    echo ""
}

# Menu principal
show_menu() {
    echo ""
    echo -e "${BLUE}Que souhaitez-vous faire ?${NC}"
    echo ""
    echo "  1) D√©marrage complet (Docker)"
    echo "  2) D√©marrage rapide (sans rebuild)"
    echo "  3) Arr√™ter tous les services"
    echo "  4) Voir les logs"
    echo "  5) Nettoyer et red√©marrer"
    echo "  6) Installation locale (sans Docker)"
    echo "  0) Quitter"
    echo ""
    read -p "Votre choix: " choice
    
    case $choice in
        1)
            check_docker
            check_docker_compose
            create_env_files
            cleanup
            build_images
            start_services
            show_info
            ;;
        2)
            check_docker
            check_docker_compose
            docker-compose up -d
            show_info
            ;;
        3)
            log_info "Arr√™t des services..."
            docker compose down
            log_info "Services arr√™t√©s"
            ;;
        4)
            docker compose logs -f
            ;;
        5)
            cleanup
            build_images
            start_services
            show_info
            ;;
        6)
            install_local
            ;;
        0)
            log_info "Au revoir !"
            exit 0
            ;;
        *)
            log_error "Choix invalide"
            show_menu
            ;;
    esac
}

# Installation locale (sans Docker)
install_local() {
    log_info "Installation locale..."

    # V√©rifier Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python 3 n'est pas install√©"
        exit 1
    fi

    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©"
        exit 1
    fi

    # Installation API
    log_info "Installation de l'API..."
    cd api
    python3 -m venv venv
    source venv/bin/activate
    pip install -r requirements.txt

    log_info "D√©marrage de l'API en arri√®re-plan..."
    nohup uvicorn main:app --reload --port 8000 > api.log 2>&1 &
    API_PID=$!
    echo $API_PID > api.pid
    cd ..

    # Installation Frontend
    log_info "Installation du Frontend..."
    cd frontend
    npm install

    log_info "D√©marrage du Frontend en arri√®re-plan..."
    nohup npm run dev > frontend.log 2>&1 &
    FRONTEND_PID=$!
    echo $FRONTEND_PID > frontend.pid
    cd ..

    log_info "Services d√©marr√©s localement"
    log_info "API PID: $API_PID"
    log_info "Frontend PID: $FRONTEND_PID"

    show_info

    log_warning "Pour arr√™ter les services:"
    echo "  kill \$(cat api/api.pid)"
    echo "  kill \$(cat frontend/frontend.pid)"
}

# Point d'entr√©e
main() {
    if [ $# -eq 0 ]; then
        show_menu
    else
        case $1 in
            start)
                check_docker
                check_docker_compose
                create_env_files
                start_services
                show_info
                ;;
            stop)
                docker compose down
                ;;
            restart)
                docker compose restart
                ;;
            logs)
                docker compose logs -f
                ;;
            clean)
                cleanup
                ;;
            *)
                log_error "Commande inconnue: $1"
                echo "Usage: $0 {start|stop|restart|logs|clean}"
                exit 1
                ;;
        esac
    fi
}

# Ex√©cution
main "$@"
